version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskscheduler-postgres
    environment:
      POSTGRES_DB: taskscheduler
      POSTGRES_USER: taskscheduler
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - taskscheduler-network
    command:
      - postgres
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
      - -c
      - effective_cache_size=1GB
      - -c
      - work_mem=16MB
      - -c
      - maintenance_work_mem=64MB
      - -c
      - checkpoint_completion_target=0.7
      - -c
      - wal_buffers=16MB
      - -c
      - default_statistics_target=100
      - -c
      - random_page_cost=1.1
      - -c
      - effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskscheduler -d taskscheduler"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taskscheduler-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - taskscheduler-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Task Scheduler Application
  taskscheduler-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taskscheduler-app
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/taskscheduler
      SPRING_DATASOURCE_USERNAME: taskscheduler
      SPRING_DATASOURCE_PASSWORD: password
      
      # Redis Configuration  
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      
      # Application Configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      
      # Task Scheduler Configuration
      TASK_SCHEDULER_THREAD_POOL_CORE_POOL_SIZE: 30
      TASK_SCHEDULER_THREAD_POOL_MAX_POOL_SIZE: 150
      TASK_SCHEDULER_THREAD_POOL_QUEUE_CAPACITY: 15000
      TASK_SCHEDULER_WORKERS_INITIAL_COUNT: 15
      TASK_SCHEDULER_WORKERS_MAX_COUNT: 75
      
      # JVM Configuration for high throughput
      JAVA_OPTS: >-
        -Xms2g 
        -Xmx4g 
        -XX:+UseG1GC 
        -XX:G1HeapRegionSize=16m 
        -XX:+UseStringDeduplication 
        -XX:+OptimizeStringConcat
        -XX:MaxGCPauseMillis=200
        -server
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - taskscheduler-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: taskscheduler-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
    networks:
      - taskscheduler-network
    restart: unless-stopped

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: taskscheduler-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - taskscheduler-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: taskscheduler-postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://taskscheduler:password@postgres:5432/taskscheduler?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - taskscheduler-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: taskscheduler-redis-exporter
    environment:
      REDIS_ADDR: redis:6379
    ports:
      - "9121:9121"
    networks:
      - taskscheduler-network
    depends_on:
      - redis
    restart: unless-stopped

  # Load Balancer (for multi-instance deployment)
  nginx:
    image: nginx:alpine
    container_name: taskscheduler-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - taskscheduler-network
    depends_on:
      - taskscheduler-app
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  taskscheduler-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment-specific overrides
# Use docker-compose.override.yml for local development
# Use docker-compose.prod.yml for production deployment